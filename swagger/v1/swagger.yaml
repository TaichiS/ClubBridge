---
openapi: 3.0.1
info:
  title: ClubBridge API
  version: v1
  description: API documentation for the ClubBridge multi-school club selection system.
paths:
  "/api/schools/{school_id}/clubs":
    get:
      summary: List clubs
      tags:
      - Clubs
      security:
      - bearer_auth: []
      parameters:
      - name: school_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
    post:
      summary: Create a club
      tags:
      - Clubs
      security:
      - bearer_auth: []
      parameters:
      - name: school_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '201':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                club:
                  type: object
                  properties:
                    name:
                      type: string
                    club_number:
                      type: string
                    category:
                      type: string
                    teacher_name:
                      type: string
                    description:
                      type: string
                    max_members:
                      type: integer
                    location:
                      type: string
                  required:
                  - name
                  - club_number
                  - category
                  - teacher_name
                  - description
                  - max_members
                  - location
  "/api/schools/{school_id}/clubs/import":
    post:
      summary: Import clubs from Excel
      tags:
      - Clubs
      security:
      - bearer_auth: []
      parameters:
      - name: school_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: file
        required: true
  "/api/schools/{school_id}/setting":
    get:
      summary: Show school settings
      tags:
      - School Settings
      security:
      - bearer_auth: []
      parameters:
      - name: school_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
    post:
      summary: Create school settings
      tags:
      - School Settings
      security:
      - bearer_auth: []
      parameters:
      - name: school_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '201':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                school_setting:
                  type: object
                  properties:
                    welcome_message:
                      type: string
    patch:
      summary: Update school settings
      tags:
      - School Settings
      security:
      - bearer_auth: []
      parameters:
      - name: school_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                school_setting:
                  type: object
                  properties:
                    welcome_message:
                      type: string
  "/api/schools/apply":
    post:
      summary: Apply for a new school
      tags:
      - Schools
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '201':
          description: successful
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                school:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the new school
                      example: My Awesome School
                  required:
                  - name
  "/api/admin/schools/pending":
    get:
      summary: List pending schools
      tags:
      - Admin
      security:
      - bearer_auth: []
      responses:
        '200':
          description: successful
  "/api/admin/schools/{id}/approve":
    post:
      summary: Approve a school
      tags:
      - Admin
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        description: ID of the school to approve
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
  "/api/schools/{school_id}/students":
    get:
      summary: List students
      tags:
      - Students
      security:
      - bearer_auth: []
      parameters:
      - name: school_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
    post:
      summary: Create a student
      tags:
      - Students
      security:
      - bearer_auth: []
      parameters:
      - name: school_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '201':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                student:
                  type: object
                  properties:
                    name:
                      type: string
                    student_id:
                      type: string
                  required:
                  - name
                  - student_id
  "/api/schools/{school_id}/students/{id}":
    parameters:
    - name: school_id
      in: path
      required: true
      schema:
        type: string
    - name: id
      in: path
      required: true
      schema:
        type: string
    patch:
      summary: Update a student
      tags:
      - Students
      security:
      - bearer_auth: []
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                student:
                  type: object
                  properties:
                    name:
                      type: string
    delete:
      summary: Delete a student
      tags:
      - Students
      security:
      - bearer_auth: []
      responses:
        '204':
          description: successful
  "/api/schools/{school_id}/students/import":
    post:
      summary: Import students from Excel
      tags:
      - Students
      security:
      - bearer_auth: []
      parameters:
      - name: school_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: file
        required: true
servers:
- url: http://localhost:3000
  description: Local development server
components:
  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer
      bearerFormat: Token
security:
- bearer_auth: []
